@model BugTracker.Models.Ticket
@using BugTracker.Models

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Ticket</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Created)
                @Html.HiddenFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Updated)
                @*@Html.EditorFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectId, "Project", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Project.Name)
                @Html.HiddenFor(model => model.ProjectId, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.EditorFor(model => model.ProjectId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketTypeId, "Ticket Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.TicketType.Name)
                <br />
                @{var TTDDList = (IEnumerable<SelectListItem>)ViewBag.TTDDList;}
                @Html.DropDownList("TicketTypeId", TTDDList)
                @*@Html.EditorFor(model => model.TicketTypeId, new { htmlAttributes = new { @class = "form-control" } })*@

                @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketPriorityId, "Ticket Priority", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.TicketPriorityId, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DisplayFor(model => model.TicketPriority.Name) <br />
                @if (User.IsInRole("Project Manager") || User.IsInRole("Admin"))
                {
                    var TPDDList = (IEnumerable<SelectListItem>)ViewBag.TPDDList;
                    @Html.DropDownList("TicketPriorityId", TPDDList)
                    @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
                }
                else
                {
                   @Html.HiddenFor(model => model.TicketPriorityId, new { htmlAttributes = new { @class = "form-control" } })
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketStatusId, "Ticket Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.TicketStatusId, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DisplayFor(model => model.TicketStatus.Name) <br />
                @{var TSDDList = (IEnumerable<SelectListItem>)ViewBag.TSDDList;}
                @Html.DropDownList("TicketStatusId", TSDDList)
                @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OwnerUserId, "Owner", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.OwnerUserId, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DisplayFor(model => model.OwnerUser.DisplayName) <br />
                @*@Html.ValidationMessageFor(model => model.OwnerUserId, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AssignedToUserId, "Assigned To", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.AssignedToUserId, new { htmlAttributes = new { @class = "form-control" } })*@
                @if (Model.AssignedToUserId == null)
                {
                    <span>Unassigned</span>
                }
                else
                {
                    @Html.DisplayFor(model => model.AssignedToUser.DisplayName)
                }
                <br />
                @if (User.IsInRole("Project Manager") || User.IsInRole("Admin"))
                {
                    var DDDList = (IEnumerable<SelectListItem>)ViewBag.DDDList;
                    <span> Note: Choose the space to unassign the ticket. </span><br />
                    @Html.DropDownList("AssignedToUserId", DDDList, " ")
                    @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.HiddenFor(model => model.AssignedToUserId, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Ticket List", "Index") <br />
    @Html.ActionLink("Project List", "Index", "Projects")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
